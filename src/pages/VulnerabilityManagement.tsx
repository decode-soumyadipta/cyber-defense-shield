
import AppLayout from "@/components/layout/AppLayout";
import { useState } from "react";
import { cn } from "@/lib/utils";
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip } from 'recharts';

// Sample vulnerability data
const vulnerabilityData = [
  { name: "Critical", value: 12, color: "#FF3D00" },
  { name: "High", value: 28, color: "#FFD600" },
  { name: "Medium", value: 45, color: "#0288D1" },
  { name: "Low", value: 65, color: "#00C853" }
];

// Sample vulnerability list
const vulnerabilities = [
  {
    id: "V-001",
    name: "Outdated OpenSSL Version",
    severity: "critical",
    affectedAssets: 5,
    discoveryDate: "2025-04-10",
    status: "open",
    cvss: 9.8,
    description: "Systems are running an outdated version of OpenSSL vulnerable to remote code execution."
  },
  {
    id: "V-002",
    name: "Weak SSH Configuration",
    severity: "high",
    affectedAssets: 12,
    discoveryDate: "2025-04-09",
    status: "in_progress",
    cvss: 7.5,
    description: "SSH services are configured to use weak ciphers and authentication methods."
  },
  {
    id: "V-003",
    name: "Missing Security Headers",
    severity: "medium",
    affectedAssets: 8,
    discoveryDate: "2025-04-08",
    status: "open",
    cvss: 5.4,
    description: "Web applications are missing important security headers like Content-Security-Policy."
  },
  {
    id: "V-004",
    name: "Default Credentials",
    severity: "critical",
    affectedAssets: 2,
    discoveryDate: "2025-04-07",
    status: "resolved",
    cvss: 9.1,
    description: "Network devices using default manufacturer credentials."
  },
  {
    id: "V-005",
    name: "Missing Patches",
    severity: "high",
    affectedAssets: 18,
    discoveryDate: "2025-04-06",
    status: "open",
    cvss: 8.2,
    description: "Windows servers missing critical security patches released in the last 30 days."
  },
  {
    id: "V-006",
    name: "Insecure TLS Configuration",
    severity: "medium",
    affectedAssets: 14,
    discoveryDate: "2025-04-05",
    status: "in_progress",
    cvss: 6.5,
    description: "Web servers configured to accept outdated TLS versions and weak cipher suites."
  },
];

export default function VulnerabilityManagement() {
  const [activeFilter, setActiveFilter] = useState("all");

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "bg-shield-red";
      case "high": return "bg-shield-yellow";
      case "medium": return "bg-shield-blue";
      case "low": return "bg-shield-green";
      default: return "bg-shield-gray";
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "open":
        return <span className="px-2 py-0.5 bg-shield-red/20 text-shield-red text-xs rounded-full">Open</span>;
      case "in_progress":
        return <span className="px-2 py-0.5 bg-shield-blue/20 text-shield-blue text-xs rounded-full">In Progress</span>;
      case "resolved":
        return <span className="px-2 py-0.5 bg-shield-green/20 text-shield-green text-xs rounded-full">Resolved</span>;
      default:
        return <span className="px-2 py-0.5 bg-shield-gray/20 text-shield-light-gray text-xs rounded-full">Unknown</span>;
    }
  };

  const filteredVulnerabilities = activeFilter === "all" 
    ? vulnerabilities 
    : vulnerabilities.filter(v => v.severity === activeFilter);

  return (
    <AppLayout>
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-shield-light-gray">Vulnerability Management</h1>
        <p className="text-shield-light-gray/70">Monitor, prioritize, and remediate security vulnerabilities</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
        <div className="lg:col-span-2 bg-shield-dark border border-shield-gray rounded-lg shadow-md p-4">
          <h2 className="text-lg font-medium mb-4 text-shield-light-gray">Vulnerability Overview</h2>
          <div className="flex flex-wrap gap-4">
            <button
              onClick={() => setActiveFilter("all")}
              className={cn(
                "px-4 py-2 rounded-md transition-colors",
                activeFilter === "all"
                  ? "bg-shield-gray text-shield-light-gray"
                  : "bg-shield-darker hover:bg-shield-gray/30 text-shield-light-gray/70"
              )}
            >
              All ({vulnerabilities.length})
            </button>
            {vulnerabilityData.map((item) => (
              <button
                key={item.name.toLowerCase()}
                onClick={() => setActiveFilter(item.name.toLowerCase())}
                className={cn(
                  "px-4 py-2 rounded-md transition-colors flex items-center",
                  activeFilter === item.name.toLowerCase()
                    ? "bg-shield-gray text-shield-light-gray"
                    : "bg-shield-darker hover:bg-shield-gray/30 text-shield-light-gray/70"
                )}
              >
                <div className="w-3 h-3 rounded-full mr-2" style={{ backgroundColor: item.color }}></div>
                {item.name} ({item.value})
              </button>
            ))}
          </div>

          <div className="mt-6">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="text-left text-xs font-medium text-shield-light-gray uppercase tracking-wider border-b border-shield-gray">
                    <th className="px-4 py-3">ID</th>
                    <th className="px-4 py-3">Vulnerability</th>
                    <th className="px-4 py-3">Severity</th>
                    <th className="px-4 py-3">CVSS</th>
                    <th className="px-4 py-3">Assets</th>
                    <th className="px-4 py-3">Status</th>
                    <th className="px-4 py-3">Discovery</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-shield-gray">
                  {filteredVulnerabilities.map((vuln) => (
                    <tr key={vuln.id} className="hover:bg-shield-gray/20 transition-colors">
                      <td className="px-4 py-3 font-mono text-sm text-shield-cyan">{vuln.id}</td>
                      <td className="px-4 py-3">
                        <div>
                          <div className="font-medium">{vuln.name}</div>
                          <div className="text-xs text-shield-light-gray/70 mt-1 max-w-sm truncate">{vuln.description}</div>
                        </div>
                      </td>
                      <td className="px-4 py-3">
                        <div className="flex items-center">
                          <div className={cn("w-3 h-3 rounded-full mr-2", getSeverityColor(vuln.severity))}></div>
                          <span className="capitalize">{vuln.severity}</span>
                        </div>
                      </td>
                      <td className="px-4 py-3 font-medium">{vuln.cvss.toFixed(1)}</td>
                      <td className="px-4 py-3">{vuln.affectedAssets}</td>
                      <td className="px-4 py-3">{getStatusBadge(vuln.status)}</td>
                      <td className="px-4 py-3 text-sm text-shield-light-gray/70">{vuln.discoveryDate}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <div className="bg-shield-dark border border-shield-gray rounded-lg shadow-md p-4">
          <h2 className="text-lg font-medium mb-4 text-shield-light-gray">Vulnerability Distribution</h2>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={vulnerabilityData}
                  cx="50%"
                  cy="50%"
                  innerRadius={60}
                  outerRadius={80}
                  paddingAngle={5}
                  dataKey="value"
                >
                  {vulnerabilityData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip 
                  contentStyle={{ 
                    backgroundColor: '#0A1929', 
                    borderColor: '#263238', 
                    color: '#E0E0E0' 
                  }}
                  itemStyle={{ color: '#E0E0E0' }}
                />
              </PieChart>
            </ResponsiveContainer>
          </div>
          <div className="flex flex-col space-y-1 mt-4">
            {vulnerabilityData.map((item, index) => (
              <div key={index} className="flex items-center justify-between text-sm">
                <div className="flex items-center">
                  <div className="w-3 h-3 rounded-full mr-2" style={{ backgroundColor: item.color }}></div>
                  <span>{item.name}</span>
                </div>
                <div className="flex items-center">
                  <span className="font-medium">{item.value}</span>
                  <span className="text-shield-light-gray/70 ml-1">
                    ({Math.round(item.value / vulnerabilityData.reduce((acc, curr) => acc + curr.value, 0) * 100)}%)
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </AppLayout>
  );
}
